fpesos <- cut(round(pesos), breaks=quantile(pesos, probs = seq(0, 1, 0.25)), labels=c("1stQ","2ndQ","3rdQ","4thQ"))
# advertencia: produce valores NA para los outliers
table(fpesos)
x <- factor(c("bajo", "alto", "medio", "alto", "alto" , "bajo", "medio"))
append(x=levels(x),values="muy_alto",after=length(x))
x
x=levels(x)
x
x <- factor(c("bajo", "alto", "medio", "alto", "alto" , "bajo", "medio")
x <- factor(c("bajo", "alto", "medio", "alto", "alto" , "bajo", "medio"))
x
levels(x)
append(x=levels(x), values = "muy_alto", after = length(x))
append(x=levels(x), values = "muy_alto", before = length(x))
append(x=levels(x), values = "muy_alto", after = x[1])
append(x=levels(x), values = "muy_alto", after = x)
append(x=levels(x), values = "muy_alto", after = length(x))
append(x=levels(x),values="muy_alto",after=length(x))
levels(x)[2] <- "no_satisfactorio"
levels(x)[2] <- "no_satisfactorio"
levels(x)
append(x=levels(x),values="muy_alto",after=length(x))
x
x <- factor(c("bajo", "alto", "medio", "alto", "alto" , "bajo", "medio"))
append(x=levels(x),values="muy_alto",after=length(x))
x
levels(x)[2] <- "no_satisfactorio"
levels(x)
levels(x)[2] <- "no_satisfactorio"
levels(x)
x
x <- factor(c("bajo", "alto", "medio", "alto", "alto" , "bajo", "medio"))
levels(x)
append(x=levels(x),values="muy_alto",after=length(x))
x
x <- factor(c("bajo", "alto", "medio", "alto", "alto" , "bajo", "medio"))
#levels(x)
append(x=levels(x),values="muy_alto",after=length(x))
#x
levels(x)[2] <- "no_satisfactorio"
#levels(x)
#x
levels(x)[2] <- "no_satisfactorio"
levels(x)
#x
matrix ()
matrix ()
?matrix
m <- matrix (1:12 , ncol =3)
m <- matrix(1:12,ncol=3,byrow=TRUE)
m[3,4] # que pasa? intentar m[4,3]
m <- matrix (1:12 , ncol =3)
m <- matrix(1:12,ncol=3,byrow=TRUE)
m[3,4] # que pasa? intentar
m <- matrix (1:12 , ncol =3)
m <- matrix(1:12,ncol=3,byrow=TRUE)
m[3,4] # que pasa? intentar
plot(cars)
v <- c(5,10,15,20)
v+1
v+v
v <- c("a","b","c","d")
v[1]
v[1:3]
v[c(1,4)]
x <- c(4,6,5,7,10,9,4,15)
y <- c(0,10,1,8,2,3,4,1)
x+y
x >7
c(x,y)
length(x)
meses_mix <- c("Enero","Febrero","Marzo","Marzo",
"Abril","Enero","Abril","Mayo",
"Junio","Agosto","Julio","Julio",
"Noviembre","Febrero","May","Agosto",
"Julio","Diciembre","Enero","Agosto","Septiembre",
"Noviembre","Febrero","Abril")
fmeses_mix <- factor(meses_mix)
table(fmeses_mix)
pesos <- rnorm(n=100,mean=50,sd=10)
fpesos <- cut(pesos,breaks=3)
table(fpesos)
fpesos <- cut(round(pesos), breaks=quantile(pesos, probs = seq(0, 1, 0.25)), labels=c("1stQ","2ndQ","3rdQ","4thQ"))
# advertencia: produce valores NA para los outliers
table(fpesos)
x <- factor(c("bajo", "alto", "medio", "alto", "alto" , "bajo", "medio"))
#levels(x)
append(x=levels(x),values="muy_alto",after=length(x))
#x
levels(x)[2] <- "no_satisfactorio"
levels(x)
#x
?matrix
m <- matrix (1:12 , ncol =3)
m <- matrix(1:12,ncol=3,byrow=TRUE)
m[3,4] # que pasa? intentar
m[4,3]
m[,3]
m[4,]
m+1
m+m
dim(m)
m #para ver la matriz completa
dim(m) # para saber sus dimensiones, concuerda?
m[3,4] # que pasa? intentar
m[4,3]
m[,3]
m[4,] #todos los elementos de la fila 4
m+1
m
m+1
m+m
m
plot(cars)
levels(x)[2] <- "no_satisfactorio"
levels(x)
#x
tinytex::install_tinytex()
m <- matrix (1:12 , ncol =3)
m <- matrix(1:12,ncol=3,byrow=TRUE)
m[3,4] # que pasa? intentar
m <- matrix (1:12 , ncol =3)
m <- matrix(1:12,ncol=3,byrow=TRUE)
# m[3,4] # que pasa? intentar
m #para ver la matriz completa
dim(m) # para saber sus dimensiones, concuerda?
m[4,3] #elemento de la fila 4, columna 3
m[,3] #todos los elementos de la columna 3
m[4,] #todos los elementos de la fila 4
m
m+1
m+m
m
m * m #multiplicacion por elemento
m %*% t(m) #multiplicacion de matrices > diag(m) #crea vector de una matriz
diag(m[3,]) #crea matriz de un vector > rowSums(m)
colMeans(m)
#Crea un vector con 12 enteros y conviértelo en una matriz de 4*3
m <- matrix (1:12 , nrow =4)
#Cambia los nombres de las columnas y filas
colnames(m) <- c("x","y","z")
rownames(m) <- c("a","b","c","d")
#Obtén una matriz de 3*3
m[1:3,1:3]
#Dimensiones de m
dim(m)
#Crea un vector con 12 enteros y conviértelo en una matriz de 4*3
m <- matrix (1:12 , nrow =4)
m
#Cambia los nombres de las columnas y filas
colnames(m) <- c("x","y","z")
rownames(m) <- c("a","b","c","d")
m
#Obtén una matriz de 3*3
m[1:3,1:3]
#Dimensiones de m
dim(m)
df <- data.frame(distance=c(4,4,4,7,8,5), condition=c("a","a","a","b","b","b"))
df[1]
df["distance"]
df["distance"][1,1]
df$condition
df$condition[1]
head(df)
tail(df)
df[1]
df
df <- data.frame(distance=c(4,4,4,7,8,5), condition=c("a","a","a","b","b","b"))
df
df[1]
df["distance"]
df["distance"][1,1]
df$condition
df$condition[1]
head(df)
tail(df)
edad <- c(22, 25, 18, 20)
edad
nombres <- c("Jaime", "Mateo", "Olivia", "Sandra")
nombres
genero <- c("M", "M", "F", "F")
genero
df <- data.frame(age=edad,names_df=nombres,gender=genero)
df
df[order(df$edad),]
df[order(df$age),]
edad <- c(22, 25, 18, 20)
edad
nombres <- c("Jaime", "Mateo", "Olivia", "Sandra")
nombres
genero <- c("M", "M", "F", "F")
genero
df <- data.frame(edades=edad,names_df=nombres,genero=genero)
df
df[order(df$age),]
df[order(df$edades),]
df <- data.frame(edades=edad,names_df=nombres,genero=genero)
df
df <- data.frame(edades=edad,names_df=nombres,genero=genero)
df
df[order(df$edades),]
df <- data.frame(edades=edad,names_df=nombres,genero=genero)
print(df)
df <- data.frame(edades=edad,names_df=nombres,genero=genero)
df
df <- data.frame(edades=edad,names_df=nombres,genero=genero)
df
df[order(df$edades),]
View(df)
View(nancycats)
vec <- 1:5
vec
df <- data.frame(y = c(1:3), x = c("m", "m", "f"))
df
char <- "Hola!"
char
vec <- 1:5
vec
df <- data.frame(y = c(1:3), x = c("m", "m", "f"))
df
char <- "Hola!"
char
```{r}
a.list <- list(vec, df, char)
a.list[1] + 1 # no funciona! porque?
a.list[[1]] + 1
str(a.list) # ver estructura de la lista
a.list
a.list <- list(vec, df, char)
a.list
# a.list[1] + 1 # no funciona! porque?
a.list[[1]] + 1
str(a.list) # ver estructura de la lista
a.list
a.list[[length(a.list) + 1]] <- "Adios..."
a.list
a.list[length(a.list)] <- NULL
a.list
w <- c(2, 7, 8)
v <- c("A", "B", "C")
x <- list(w, v)
y <- c("M", "M", "F")
x
x[[2]][1] <- "Z"
x
x
y
x[length(x)+1] <- y
x
x[length(x)] <- y
x
m
v <- c(5,10,15,20)
v+1
v+v
v <- c("a","b","c","d")
v[1]
v[1:3]
v[c(1,4)]
x <- c(4,6,5,7,10,9,4,15)
y <- c(0,10,1,8,2,3,4,1)
x+y
x >7
c(x,y)
length(x)
meses_mix <- c("Enero","Febrero","Marzo","Marzo",
"Abril","Enero","Abril","Mayo",
"Junio","Agosto","Julio","Julio",
"Noviembre","Febrero","May","Agosto",
"Julio","Diciembre","Enero","Agosto","Septiembre",
"Noviembre","Febrero","Abril")
fmeses_mix <- factor(meses_mix)
table(fmeses_mix)
pesos <- rnorm(n=100,mean=50,sd=10)
fpesos <- cut(pesos,breaks=3)
table(fpesos)
fpesos <- cut(round(pesos), breaks=quantile(pesos, probs = seq(0, 1, 0.25)), labels=c("1stQ","2ndQ","3rdQ","4thQ"))
# advertencia: produce valores NA para los outliers
table(fpesos)
x <- factor(c("bajo", "alto", "medio", "alto", "alto" , "bajo", "medio"))
#levels(x)
append(x=levels(x),values="muy_alto",after=length(x))
#x
levels(x)[2] <- "no_satisfactorio"
levels(x)
#x
?matrix
m <- matrix (1:12 , ncol =3)
m <- matrix(1:12,ncol=3,byrow=TRUE)
# m[3,4] # qué pasa? intentar ejecutar sin el #
m #para ver la matriz completa
dim(m) # para saber sus dimensiones, concuerda?
m[4,3] #elemento de la fila 4, columna 3
m[,3] #todos los elementos de la columna 3
m[4,] #todos los elementos de la fila 4
m
m+1
m+m
m
m * m #multiplicacion por elemento
m %*% t(m) #multiplicacion de matrices > diag(m) #crea vector de una matriz
diag(m[3,]) #crea matriz de un vector > rowSums(m)
colMeans(m)
#Crea un vector con 12 enteros y conviértelo en una matriz de 4*3
m <- matrix (1:12 , nrow =4)
m
#Cambia los nombres de las columnas y filas
colnames(m) <- c("x","y","z")
rownames(m) <- c("a","b","c","d")
m
#Obtén una matriz de 3*3
m[1:3,1:3]
#Dimensiones de m
dim(m)
df <- data.frame(distance=c(4,4,4,7,8,5), condition=c("a","a","a","b","b","b"))
df
df[1]
df["distance"]
df["distance"][1,1]
df$condition
df$condition[1]
head(df)
tail(df)
edad <- c(22, 25, 18, 20)
edad
nombres <- c("Jaime", "Mateo", "Olivia", "Sandra")
nombres
genero <- c("M", "M", "F", "F")
genero
df <- data.frame(edades=edad,names_df=nombres,genero=genero)
df
df[order(df$edades),]
vec <- 1:5
vec
df <- data.frame(y = c(1:3), x = c("m", "m", "f"))
df
char <- "Hola!"
char
a.list <- list(vec, df, char)
a.list
# a.list[1] + 1 # no funciona! porque?
a.list[[1]] + 1
str(a.list) # ver estructura de la lista
a.list
a.list[[length(a.list) + 1]] <- "Adios..."
a.list
a.list[length(a.list)] <- NULL
a.list
w <- c(2, 7, 8)
v <- c("A", "B", "C")
x <- list(w, v)
y <- c("M", "M", "F")
x
x[[2]][1] <- "Z"
x
x
y
x[length(x)+1] <- y
x
x[length(x)] <- y
m
matriz <- matrix(1:12, nrow = 4)
matriz
t(matriz)
a.list <- list(c(1:4), c(10:25), c(35:40))
lapply(a.list,mean)
lapply(a.list,sum)
lapply(a.list,function(x) x/2-round(x/2) == 0)
sapply(a.list,mean)
sapply(a.list,sum)
a.list <- list(c(1:4), c(10:25), c(35:40))
a.list
a.list <- list(c(1:4), c(10:25), c(35:40))
a.list
lapply(a.list,mean)
lapply(a.list,sum)
lapply(a.list,function(x) x/2-round(x/2) == 0)
a.list <- list(c(1:4), c(10:25), c(35:40))
a.list
lapply(a.list,mean)
lapply(a.list,sum)
lapply(a.list,function(x) x/2-round(x/2) == 0)
a.list <- list(c(1:4), c(10:25), c(35:40))
a.list
lapply(a.list,mean)
lapply(a.list,sum)
lapply(a.list,function(x) x/2-round(x/2) == 0)
sapply(a.list,mean)
sapply(a.list,sum)
a.list <- list(c(1:4), c(10:25), c(35:40))
a.list
lapply(a.list,mean)
lapply(a.list,sum)
lapply(a.list,function(x) x/2-round(x/2) == 0)
install.packages("ProjectTemplate")
sessionInfo()
library(adegenet)
sessionInfo()
sessionInfo()
df
df
sessionInfo()
getwd()
print(getwd())
library(adegenet)
data(nancycats)
print(nancycats)
5 + 5
5 + 5
10*8 + 3*(6 - 2/4)^10
3*(6 - 2/4)^10
(6 - 2/4)
3*(6 - 2/4)
5 + 5
10*8 + 3*(6 - 2/4)^10
3*(6 - 2/4)^10
x <- 5
x
10 -> x
x
10 <- x
ls()
getwd()
y<- 10
plot(x,y)
y<- x + 10
x
y
x <- 5
y<- x + 10
x
y
plot(x,y)
pressure
help
help()
?plot
getwd()
dir()
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>% # plot usually does not return anything.
colSums
library(magrittr)
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>% # plot usually does not return anything.
colSums
rnorm(200) %>%
matrix(ncol = 2) %>%
plot %>% # plot usually does not return anything.
colSums
rnorm(200) %>%
matrix(ncol = 2) %T>%
plot %>% # plot usually does not return anything.
colSums
mean()
mean
?mean
mean
library
#Script de prueba
#Operaciones aritméticas
5 + 5 # Suma
5 - 5 #Resta
# Multiplicación
3 * 5
# División
(5 + 5) / 2
#Script de prueba
#Operaciones aritméticas
5 + 5 # Suma
# Agregar un valor a la variable
x<- 5
x #Imprime lo que contiene el objeto (variable) X
x + 1 #Suma 1 al objeto x
#Se guardo el valor de 6?
x
#Para guardar este valor podemos reescribir al variable
x <- x+1
x
# O podemos asignar este nuevo valor a otro objeto (variable)
y <- x * 2 # estamos guardando el resultado de x por 2 en la variable y
# Verifica que valores tiene x y y
x
y
mean
class(nancycats)
class(x)
dim
dim(x)
notas <- c(4.0, 1.3, 3.8, 2.0)
notas
class(notas)
notas <- c(4.0, 1.3, 3.8, 2.0)
notas
notas <- c(4.0,1.3,3.8,2.0)
notas
notas <- c(4,1.3,3.8,2)
?mean
?sd
install.packages("ggplot2")
?rnorm
library(MASS)
head(Animals)
Animals
subset(x=Animals , subset=body > 1000)
attach(Traffic)
head(Traffic)
aggregate(data=Traffic ,formula=y~year*limit ,FUN=mean)
aggregate(data=Traffic ,formula=y~year*limit ,FUN=mean)
class(Traffic)
